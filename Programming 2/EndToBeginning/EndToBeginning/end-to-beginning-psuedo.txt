Main()
	int size_of_list, number_list, parallel_list							1
	input(number of list elements)									1
	if number < 1											1+max(1,0)
		number too small

	number_list = new_list										1
	parallel_list = new_list									1

	for i to size of list										n+2
		input(number_list [i])
		parallel_list[i] = 0

	for i to size of list										n+1
		output(list element i)

	//send list to be processed
	end(size_of_list, number_list, parallel_list)							1

	deallocate parallel_list									1
	deallocate number_list										1


End(size_of_list, number_list, parallel_list)
	parallel[size_of_list - 1] = 0 //set last element to 0						1
	
	largest_possible_subset = 0									1
	
	for size_of_list-2 to 0										1+n-2 + 1
		for outer_loop_index + 1 to size_of_list			                        1+ n-1 + 1
			if number_list[outer_loop_index] < number_list[inner_loop_index]		1 + max(1+max(1,0))
				if parallel_list[outer_loop_index] < parallel_list[inner_loop_index]
					parallel[outer_loop_index] = parallel[inner_loop_index] + 1

		if parallel[outer_loop_index] > largest_possible_subset					1+max(1,0)
			largest_possible_subet = parallel[outer_loop_index]

	

	sequence = ""											1
	for 0 to size_of_list										n
		if largest_possible_subset == parallel_list[i]						1+max(2,0)
			decrement largest_possible_subset
			sequence.append(number_list[i]


Time complexity: O(n^2)



	
